/**
 * DialMyCalls API
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Models/CreateCallerIdParameters', 'Models/CreateUnverifiedCallerIdParameters', 'Models/UpdateCallerIdByIdParameters', 'Models/VerifyCallerIdByIdParameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Models/CreateCallerIdParameters'), require('../Models/CreateUnverifiedCallerIdParameters'), require('../Models/UpdateCallerIdByIdParameters'), require('../Models/VerifyCallerIdByIdParameters'));
  } else {
    // Browser globals (root is window)
    if (!root.DialmycallsJsClient) {
      root.DialmycallsJsClient = {};
    }
    root.DialmycallsJsClient.CallerIds = factory(root.DialmycallsJsClient.ApiClient, root.DialmycallsJsClient.CreateCallerIdParameters, root.DialmycallsJsClient.CreateUnverifiedCallerIdParameters, root.DialmycallsJsClient.UpdateCallerIdByIdParameters, root.DialmycallsJsClient.VerifyCallerIdByIdParameters);
  }
}(this, function(ApiClient, CreateCallerIdParameters, CreateUnverifiedCallerIdParameters, UpdateCallerIdByIdParameters, VerifyCallerIdByIdParameters) {
  'use strict';

  /**
   * CallerIds service.
   * @module Api/CallerIds
   * @version 2.0.1
   */

  /**
   * Constructs a new CallerIds. 
   * @alias module:Api/CallerIds
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCallerId operation.
     * @callback module:Api/CallerIds~createCallerIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Caller ID
     * Add a caller ID. &lt;br&gt;&lt;br&gt; Returns a caller ID object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;New Number\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/callerid &#x60;&#x60;&#x60;
     * @param {module:Models/CreateCallerIdParameters} createCallerIdParameters Request body
     * @param {module:Api/CallerIds~createCallerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createCallerId = function(createCallerIdParameters, callback) {
      var postBody = createCallerIdParameters;

      // verify the required parameter 'createCallerIdParameters' is set
      if (createCallerIdParameters == undefined || createCallerIdParameters == null) {
        throw "Missing the required parameter 'createCallerIdParameters' when calling createCallerId";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/callerid', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUnverifiedCallerId operation.
     * @callback module:Api/CallerIds~createUnverifiedCallerIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Caller ID (Unverified)
     * Initiate adding a new caller ID when you need to go through the verification process. You will receive a phone call at the phone number provided and will need to make a subsequent API call with the PIN code that you are provided. &lt;br&gt;&lt;br&gt; Returns a caller ID object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;New Number\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/verify/callerid &#x60;&#x60;&#x60;
     * @param {module:Models/CreateUnverifiedCallerIdParameters} createUnverifiedCallerIdParameters Request body
     * @param {module:Api/CallerIds~createUnverifiedCallerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createUnverifiedCallerId = function(createUnverifiedCallerIdParameters, callback) {
      var postBody = createUnverifiedCallerIdParameters;

      // verify the required parameter 'createUnverifiedCallerIdParameters' is set
      if (createUnverifiedCallerIdParameters == undefined || createUnverifiedCallerIdParameters == null) {
        throw "Missing the required parameter 'createUnverifiedCallerIdParameters' when calling createUnverifiedCallerId";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/verify/callerid', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCallerIdById operation.
     * @callback module:Api/CallerIds~deleteCallerIdByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Caller ID
     * Delete a caller ID. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID &#x60;&#x60;&#x60;
     * @param {String} calleridId CalleridId
     * @param {module:Api/CallerIds~deleteCallerIdByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteCallerIdById = function(calleridId, callback) {
      var postBody = null;

      // verify the required parameter 'calleridId' is set
      if (calleridId == undefined || calleridId == null) {
        throw "Missing the required parameter 'calleridId' when calling deleteCallerIdById";
      }


      var pathParams = {
        'CalleridId': calleridId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/callerid/{CalleridId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallerIdById operation.
     * @callback module:Api/CallerIds~getCallerIdByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Caller ID
     * Retrieve a caller ID. &lt;br&gt;&lt;br&gt; Returns a caller ID object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID &#x60;&#x60;&#x60;
     * @param {String} calleridId CalleridId
     * @param {module:Api/CallerIds~getCallerIdByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getCallerIdById = function(calleridId, callback) {
      var postBody = null;

      // verify the required parameter 'calleridId' is set
      if (calleridId == undefined || calleridId == null) {
        throw "Missing the required parameter 'calleridId' when calling getCallerIdById";
      }


      var pathParams = {
        'CalleridId': calleridId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/callerid/{CalleridId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallerIds operation.
     * @callback module:Api/CallerIds~getCallerIdsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Caller IDs
     * Retrieve a list of caller IDs. &lt;br&gt;&lt;br&gt; Returns a list of caller ID objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/callerids &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.range Range (ie \&quot;records&#x3D;201-300\&quot;) of callerids requested
     * @param {module:Api/CallerIds~getCallerIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getCallerIds = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Range': opts['range']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/callerids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCallerIdById operation.
     * @callback module:Api/CallerIds~updateCallerIdByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Caller ID
     * Update an existing caller ID. &lt;br&gt;&lt;br&gt; Returns a caller ID object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Number Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID &#x60;&#x60;&#x60;
     * @param {module:Models/UpdateCallerIdByIdParameters} updateCallerIdByIdParameters Request body
     * @param {String} calleridId CalleridId
     * @param {module:Api/CallerIds~updateCallerIdByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateCallerIdById = function(updateCallerIdByIdParameters, calleridId, callback) {
      var postBody = updateCallerIdByIdParameters;

      // verify the required parameter 'updateCallerIdByIdParameters' is set
      if (updateCallerIdByIdParameters == undefined || updateCallerIdByIdParameters == null) {
        throw "Missing the required parameter 'updateCallerIdByIdParameters' when calling updateCallerIdById";
      }

      // verify the required parameter 'calleridId' is set
      if (calleridId == undefined || calleridId == null) {
        throw "Missing the required parameter 'calleridId' when calling updateCallerIdById";
      }


      var pathParams = {
        'CalleridId': calleridId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/callerid/{CalleridId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyCallerIdById operation.
     * @callback module:Api/CallerIds~verifyCallerIdByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Caller ID
     * Verify a new caller ID. &lt;br&gt;&lt;br&gt; Returns a caller ID object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;New Number\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/verify/callerid/$CALLERID_ID &#x60;&#x60;&#x60;
     * @param {module:Models/VerifyCallerIdByIdParameters} verifyCallerIdByIdParameters Request body
     * @param {String} calleridId CalleridId
     * @param {module:Api/CallerIds~verifyCallerIdByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.verifyCallerIdById = function(verifyCallerIdByIdParameters, calleridId, callback) {
      var postBody = verifyCallerIdByIdParameters;

      // verify the required parameter 'verifyCallerIdByIdParameters' is set
      if (verifyCallerIdByIdParameters == undefined || verifyCallerIdByIdParameters == null) {
        throw "Missing the required parameter 'verifyCallerIdByIdParameters' when calling verifyCallerIdById";
      }

      // verify the required parameter 'calleridId' is set
      if (calleridId == undefined || calleridId == null) {
        throw "Missing the required parameter 'calleridId' when calling verifyCallerIdById";
      }


      var pathParams = {
        'CalleridId': calleridId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/verify/callerid/{CalleridId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
