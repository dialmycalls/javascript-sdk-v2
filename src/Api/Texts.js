/**
 * DialMyCalls API
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Models/CreateTextParameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Models/CreateTextParameters'));
  } else {
    // Browser globals (root is window)
    if (!root.DialmycallsJsClient) {
      root.DialmycallsJsClient = {};
    }
    root.DialmycallsJsClient.Texts = factory(root.DialmycallsJsClient.ApiClient, root.DialmycallsJsClient.CreateTextParameters);
  }
}(this, function(ApiClient, CreateTextParameters) {
  'use strict';

  /**
   * Texts service.
   * @module Api/Texts
   * @version 2.0.1
   */

  /**
   * Constructs a new Texts. 
   * @alias module:Api/Texts
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelTextById operation.
     * @callback module:Api/Texts~cancelTextByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Text
     * Cancel an outgoing text. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/text/$TEXT_ID &#x60;&#x60;&#x60;
     * @param {String} textId TextId
     * @param {module:Api/Texts~cancelTextByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.cancelTextById = function(textId, callback) {
      var postBody = null;

      // verify the required parameter 'textId' is set
      if (textId == undefined || textId == null) {
        throw "Missing the required parameter 'textId' when calling cancelTextById";
      }


      var pathParams = {
        'TextId': textId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/service/text/{TextId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createText operation.
     * @callback module:Api/Texts~createTextCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Text
     * Create an outgoing text broadcast. &lt;br&gt;&lt;br&gt; Returns a service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;keyword_id\\\&quot;: \\\&quot;dfe49537-a0a8-4f4a-98a1-e03df388af11\\\&quot;, \\\&quot;send_immediately\\\&quot;: true,\\\&quot;messages\\\&quot;: [\\\&quot;Testing testing\\\&quot;], \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/text &#x60;&#x60;&#x60;
     * @param {module:Models/CreateTextParameters} createTextParameters Request body
     * @param {module:Api/Texts~createTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createText = function(createTextParameters, callback) {
      var postBody = createTextParameters;

      // verify the required parameter 'createTextParameters' is set
      if (createTextParameters == undefined || createTextParameters == null) {
        throw "Missing the required parameter 'createTextParameters' when calling createText";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/service/text', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIncomingTextById operation.
     * @callback module:Api/Texts~deleteIncomingTextByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Incoming Text
     * Delete a incoming text. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/incoming/text/$TEXT_ID &#x60;&#x60;&#x60;
     * @param {String} textId TextId
     * @param {module:Api/Texts~deleteIncomingTextByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteIncomingTextById = function(textId, callback) {
      var postBody = null;

      // verify the required parameter 'textId' is set
      if (textId == undefined || textId == null) {
        throw "Missing the required parameter 'textId' when calling deleteIncomingTextById";
      }


      var pathParams = {
        'TextId': textId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/incoming/text/{TextId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIncomingTextById operation.
     * @callback module:Api/Texts~getIncomingTextByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Incoming Text
     * Retrieve a text. &lt;br&gt;&lt;br&gt; Returns a Incoming Text object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/incoming/text/$TEXT_ID &#x60;&#x60;&#x60;
     * @param {String} textId TextId
     * @param {module:Api/Texts~getIncomingTextByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getIncomingTextById = function(textId, callback) {
      var postBody = null;

      // verify the required parameter 'textId' is set
      if (textId == undefined || textId == null) {
        throw "Missing the required parameter 'textId' when calling getIncomingTextById";
      }


      var pathParams = {
        'TextId': textId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/incoming/text/{TextId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIncomingTexts operation.
     * @callback module:Api/Texts~getIncomingTextsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Incoming Texts
     * Retrieve a list of texts. &lt;br&gt;&lt;br&gt; Returns a list of Incoming Text objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/incoming/texts &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.range Range (ie \&quot;records&#x3D;201-300\&quot;) of texts requested
     * @param {module:Api/Texts~getIncomingTextsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getIncomingTexts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Range': opts['range']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/incoming/texts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getShortCodes operation.
     * @callback module:Api/Texts~getShortCodesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Shortcodes
     * Retrieve a list of shortcodes. &lt;br&gt;&lt;br&gt; Returns a list of shortcode objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/shortcodes &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.range Range (ie \&quot;records&#x3D;201-300\&quot;) of shortcodes requested
     * @param {module:Api/Texts~getShortCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getShortCodes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Range': opts['range']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/shortcodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextById operation.
     * @callback module:Api/Texts~getTextByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Text
     * Retrieve a text. &lt;br&gt;&lt;br&gt; Returns a service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/text/$TEXT_ID &#x60;&#x60;&#x60;
     * @param {String} textId TextId
     * @param {module:Api/Texts~getTextByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getTextById = function(textId, callback) {
      var postBody = null;

      // verify the required parameter 'textId' is set
      if (textId == undefined || textId == null) {
        throw "Missing the required parameter 'textId' when calling getTextById";
      }


      var pathParams = {
        'TextId': textId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/service/text/{TextId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextRecipientsByTextId operation.
     * @callback module:Api/Texts~getTextRecipientsByTextIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Text Recipients
     * Retrieve a list of a text&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of text recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/text/$TEXT_ID/recipients &#x60;&#x60;&#x60;
     * @param {String} textId TextId
     * @param {Object} opts Optional parameters
     * @param {String} opts.range Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested
     * @param {module:Api/Texts~getTextRecipientsByTextIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getTextRecipientsByTextId = function(textId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'textId' is set
      if (textId == undefined || textId == null) {
        throw "Missing the required parameter 'textId' when calling getTextRecipientsByTextId";
      }


      var pathParams = {
        'TextId': textId
      };
      var queryParams = {
      };
      var headerParams = {
        'Range': opts['range']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/service/text/{TextId}/recipients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTexts operation.
     * @callback module:Api/Texts~getTextsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Texts
     * Retrieve a list of texts. &lt;br&gt;&lt;br&gt; Returns a list of service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/texts &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.range Range (ie \&quot;records&#x3D;201-300\&quot;) of texts requested
     * @param {module:Api/Texts~getTextsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getTexts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Range': opts['range']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/service/texts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
