/**
 * DialMyCalls API
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Models/CreateRecordingParameters', 'Models/CreateRecordingByPhoneParameters', 'Models/CreateRecordingByUrlParameters', 'Models/UpdateRecordingByIdParameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Models/CreateRecordingParameters'), require('../Models/CreateRecordingByPhoneParameters'), require('../Models/CreateRecordingByUrlParameters'), require('../Models/UpdateRecordingByIdParameters'));
  } else {
    // Browser globals (root is window)
    if (!root.DialmycallsJsClient) {
      root.DialmycallsJsClient = {};
    }
    root.DialmycallsJsClient.Recordings = factory(root.DialmycallsJsClient.ApiClient, root.DialmycallsJsClient.CreateRecordingParameters, root.DialmycallsJsClient.CreateRecordingByPhoneParameters, root.DialmycallsJsClient.CreateRecordingByUrlParameters, root.DialmycallsJsClient.UpdateRecordingByIdParameters);
  }
}(this, function(ApiClient, CreateRecordingParameters, CreateRecordingByPhoneParameters, CreateRecordingByUrlParameters, UpdateRecordingByIdParameters) {
  'use strict';

  /**
   * Recordings service.
   * @module Api/Recordings
   * @version 2.0.1
   */

  /**
   * Constructs a new Recordings. 
   * @alias module:Api/Recordings
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRecording operation.
     * @callback module:Api/Recordings~createRecordingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Recording (Text-to-Speech)
     * Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
     * @param {module:Models/CreateRecordingParameters} createRecordingParameters Request body
     * @param {module:Api/Recordings~createRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createRecording = function(createRecordingParameters, callback) {
      var postBody = createRecordingParameters;

      // verify the required parameter 'createRecordingParameters' is set
      if (createRecordingParameters == undefined || createRecordingParameters == null) {
        throw "Missing the required parameter 'createRecordingParameters' when calling createRecording";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/recording/tts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRecordingByPhone operation.
     * @callback module:Api/Recordings~createRecordingByPhoneCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Recording (Phone)
     * Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
     * @param {module:Models/CreateRecordingByPhoneParameters} createRecordingByPhoneParameters Request body
     * @param {module:Api/Recordings~createRecordingByPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createRecordingByPhone = function(createRecordingByPhoneParameters, callback) {
      var postBody = createRecordingByPhoneParameters;

      // verify the required parameter 'createRecordingByPhoneParameters' is set
      if (createRecordingByPhoneParameters == undefined || createRecordingByPhoneParameters == null) {
        throw "Missing the required parameter 'createRecordingByPhoneParameters' when calling createRecordingByPhone";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/recording/phone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRecordingByUrl operation.
     * @callback module:Api/Recordings~createRecordingByUrlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Recording (URL)
     * Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
     * @param {module:Models/CreateRecordingByUrlParameters} createRecordingByUrlParameters Request body
     * @param {module:Api/Recordings~createRecordingByUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createRecordingByUrl = function(createRecordingByUrlParameters, callback) {
      var postBody = createRecordingByUrlParameters;

      // verify the required parameter 'createRecordingByUrlParameters' is set
      if (createRecordingByUrlParameters == undefined || createRecordingByUrlParameters == null) {
        throw "Missing the required parameter 'createRecordingByUrlParameters' when calling createRecordingByUrl";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/recording/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecordingById operation.
     * @callback module:Api/Recordings~deleteRecordingByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Recording
     * Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
     * @param {String} recordingId RecordingId
     * @param {module:Api/Recordings~deleteRecordingByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteRecordingById = function(recordingId, callback) {
      var postBody = null;

      // verify the required parameter 'recordingId' is set
      if (recordingId == undefined || recordingId == null) {
        throw "Missing the required parameter 'recordingId' when calling deleteRecordingById";
      }


      var pathParams = {
        'RecordingId': recordingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/recording/{RecordingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordingById operation.
     * @callback module:Api/Recordings~getRecordingByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recording
     * Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
     * @param {String} recordingId RecordingId
     * @param {module:Api/Recordings~getRecordingByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getRecordingById = function(recordingId, callback) {
      var postBody = null;

      // verify the required parameter 'recordingId' is set
      if (recordingId == undefined || recordingId == null) {
        throw "Missing the required parameter 'recordingId' when calling getRecordingById";
      }


      var pathParams = {
        'RecordingId': recordingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/recording/{RecordingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordings operation.
     * @callback module:Api/Recordings~getRecordingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Recordings
     * Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
     * @param {Object} opts Optional parameters
     * @param {String} opts.range Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested
     * @param {module:Api/Recordings~getRecordingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getRecordings = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Range': opts['range']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/recordings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRecordingById operation.
     * @callback module:Api/Recordings~updateRecordingByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Recording
     * Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
     * @param {module:Models/UpdateRecordingByIdParameters} updateRecordingByIdParameters Request body
     * @param {String} recordingId RecordingId
     * @param {module:Api/Recordings~updateRecordingByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateRecordingById = function(updateRecordingByIdParameters, recordingId, callback) {
      var postBody = updateRecordingByIdParameters;

      // verify the required parameter 'updateRecordingByIdParameters' is set
      if (updateRecordingByIdParameters == undefined || updateRecordingByIdParameters == null) {
        throw "Missing the required parameter 'updateRecordingByIdParameters' when calling updateRecordingById";
      }

      // verify the required parameter 'recordingId' is set
      if (recordingId == undefined || recordingId == null) {
        throw "Missing the required parameter 'recordingId' when calling updateRecordingById";
      }


      var pathParams = {
        'RecordingId': recordingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/recording/{RecordingId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
